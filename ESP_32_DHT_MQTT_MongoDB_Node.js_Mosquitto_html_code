<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Mosquitto Websockets</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="mqttws31.js" type="text/javascript"></script>
<script src="./fetch"></script>
    <script src="jquery.min.js" type="text/javascript"></script>
    <script src="config.js" type="text/javascript"></script>
    <script src="https://code.highcharts.com/highcharts.js"></script>


  </head>
  <body>
    <h1>Mosquitto Websockets</h1>
    <div class="widget-container" >
      <div class="widget">
        <i class="fa fa-thermometer-empty"></i>
        <span class="label">Temp</span>
        <span class="widget-value temp-data">15</span>
      </div>
      
      <div class="widget">
        <i class="fa fa-tint"></i>
        <span class="label">Humid</span>
        <span class="widget-value humid-data">50%</span>
      </div>
      </div>
    <div id="chart-container"></div>
    <div>
        <div>Subscribed to <input type='text' id='topic' disabled />
        Status: <input type='text' id='status' size="80" disabled /></div>

        <ul id='ws' style="font-family: 'Courier New', Courier, monospace;"></ul>
    </div>
        <script type="text/javascript">
    var mqtt;
    var reconnectTimeout = 2000;

    function MQTTconnect() {
	if (typeof path == "undefined") {
		path = '/mqtt';
	}
	mqtt = new Paho.MQTT.Client(
			host,
			port,
			path,
			"web_" + parseInt(Math.random() * 100, 10)
	);
        var options = {
            timeout: 3,
            useSSL: useTLS,
            cleanSession: cleansession,
            onSuccess: onConnect,
            onFailure: function (message) {
                $('#status').val("Connection failed: " + message.errorMessage + "Retrying");
                setTimeout(MQTTconnect, reconnectTimeout);
            }
        };

        mqtt.onConnectionLost = onConnectionLost;
        mqtt.onMessageArrived = onMessageArrived;

        if (username != null) {
            options.userName = username;
            options.password = password;
        }
        console.log("Host="+ host + ", port=" + port + ", path=" + path + " TLS = " + useTLS + " username=" + username + " password=" + password);
        mqtt.connect(options);
    }

    function onConnect() {
        $('#status').val('Connected to ' + host + ':' + port + path);
        // Connection succeeded; subscribe to our topic
        mqtt.subscribe(topic, {qos: 0});
        $('#topic').val(topic);
        
        // Set up chart
        chart = Highcharts.chart('chart-container', {
        chart: {
          type: 'line',
        },
        title: {
          text: 'Sensor Data',
        },
        xAxis: {
          type: 'datetime',
          title: {
            text: 'Timestamp'
          }
        },
        yAxis: [{
          title: {
            text: 'Temp'
          }
        }, {
          title: {
            text: 'Humid'
          },
          opposite: false // display on opposite side of chart
        }],
        series: [{
          name: 'Temp',
          data: [],
          yAxis: 0 // use the first yAxis (index 0) for this series
        }, {
          name: 'Humid',
          data: [],
          yAxis: 1 // use the second yAxis (index 1) for this series
        }]
      });
    }

    function onConnectionLost(response) {
        setTimeout(MQTTconnect, reconnectTimeout);
        $('#status').val("connection lost: " + responseObject.errorMessage + ". Reconnecting");

    };

    function onMessageArrived(message) {

        var topic = message.destinationName;
        var payload = message.payloadString;

        $('#ws').prepend('<li>' + topic + ' = ' + payload + '</li>');

    // Parse message data
        var data = JSON.parse(payload);
        var timestamp = new Date().getTime();
        var temp = parseFloat(data.temp);
        var humid = parseFloat(data.humid); 
        
        chart.series[0].addPoint([Date.now(), data.temp]); 
        chart.series[1].addPoint([Date.now(), data.humid]);
        // Redraw the chart
        chart.redraw();

        //WIDGET
        const widgetContainers = document.querySelectorAll('.widget-container');
        
        // Loop through each widget container and update the widget data
        widgetContainers.forEach(widgetElement => {
          widgetElement.querySelector('.temp-data').textContent = data.temp;
          widgetElement.querySelector('.humid-data').textContent = data.humid;
        });
    };


    $(document).ready(function() {
        MQTTconnect();
    });

    </script>
  </body>
</html>

<style>
  .widget-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      width: 100%;
      max-width: 1200px;
      margin: 0 auto;
    }

   .widget {
      flex-basis: calc((100% - 30px) / 4); /* 4 widgets in the first row */
      margin-bottom: 20px;
      background-color: #ffffff;
      padding: 10px;
      border: 1px solid #e3e3e3;
      text-align: center;
    }
</style>
