// Import required libraries
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <SPIFFS.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>

//MQTT
#include<PubSubClient.h>
#include <ArduinoJson.h>

WiFiClient espClient;
PubSubClient client(espClient);

//MQTT
const char * mqtt_broker = "192.168.1.69";
//const char * mqtt_broker = "broker.hivemq.com";
const char * mqtt_topic = "jaysanmo/codettes/01"; // CHANGE SensorID here!
const char * mqtt_User = "";
const char * mqtt_Password = "";

// Replace with your network credentials
const char* ssid = "Team09";
const char* password = "H@ckTe@m)(";

#define DHTPIN 4
#define DHTTYPE    DHT11
DHT dht(DHTPIN, DHTTYPE);
// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

float t = 0;
float h = 0;

String readDHTTemperature() {
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  // Convert temperature to Fahrenheit
  //t = 1.8 * t + 32;
  if (isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
    return "";
  }
  else {
    Serial.println(t);
    return String(t);
  }
}
String readDHTHumidity() {
  float h = dht.readHumidity();
  if (isnan(h)) {
    Serial.println("Failed to read from DHT sensor!");
    return "";
  }
  else {
    Serial.println(h);
    return String(h);
  }
}
void setup() {
  // Serial port for debugging purposes
  Serial.begin(115200);
  dht.begin();
  // Initialize SPIFFS
  if (!SPIFFS.begin()) {
    Serial.println("An Error has occurred while mounting SPIFFS");
    return;
  }
  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  WiFi.setSleep(false);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }
  // Print ESP32 Local IP Address
  Serial.println(WiFi.localIP());


  //MQTT
  client.setServer(mqtt_broker, 1883);
  if (initMqtt()) {
    client.publish("jaysanmo/codettes/01", "Hello from ESP32");
  }

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send(SPIFFS, "/index.html");
  });
  server.on("/temperature", HTTP_GET, [](AsyncWebServerRequest   * request) {
    request->send_P(200, "text/plain", readDHTTemperature().c_str());
  });
  server.on("/humidity", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send_P(200, "text/plain", readDHTHumidity().c_str());
  });
  // Start server
  server.begin();
}


unsigned long lastMqttTime = millis();
const unsigned long Mqtt_INTERVAL_MS = 2000;
void loop() {

  client.loop();

  // Send regular mqtt data
  if ((millis() - lastMqttTime) > Mqtt_INTERVAL_MS) {
    if (client.connected())
    {
      //GetWeatherData();
      handle_MqttData();
      lastMqttTime = millis();
    } else
    {
      initMqtt();
    }


  }
}
void GetWeatherData()
{
  
}

bool initMqtt()
{
  if (!client.connected()) {
    Serial.println("Connecting to MQTT...");

    if (client.connect("ESP32Client", mqtt_User, mqtt_Password )) {

      Serial.println("connected");
      return true;

    } else {

      Serial.print("failed with state ");
      Serial.print(client.state());
      delay(2000);
      return false;
    }
  }
}

void handle_MqttData() {
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  StaticJsonDocument<2048> doc;
  //JsonObject createNestedObject() const;

  doc["temp"] = t;
  doc["humid"] = h;

  char out[2048];
  int b = serializeJson(doc, out);
  serializeJson(doc, Serial);
  Serial.print("bytes ->  ");
  Serial.print(b, DEC);
  // add if delivered or not
  client.publish((char*)mqtt_topic, out) ? Serial.println(" -> delivered") : Serial.println(" -> failed");
}
